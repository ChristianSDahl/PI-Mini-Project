package com.example.christian.pollvotingsoftware;import android.content.Intent;import android.os.Bundle;import android.support.v7.app.AppCompatActivity;import android.util.Log;import android.view.Gravity;import android.view.View;import android.widget.Button;import android.widget.TableLayout;import android.widget.TableRow;import android.widget.TextView;import java.io.BufferedReader;import java.io.DataOutputStream;import java.io.IOException;import java.io.InputStreamReader;import java.net.InetAddress;import java.net.Socket;import static android.R.id.button1;import static android.os.Build.VERSION_CODES.M;import static com.example.christian.pollvotingsoftware.Main_Menu.messageFromServer;import static com.example.christian.pollvotingsoftware.Main_Menu.messageToServer;import static com.example.christian.pollvotingsoftware.R.id.connect;import static java.net.InetAddress.getByName;/** * Created by Christian on 27-04-2017. */public class Poll_Overview extends AppCompatActivity {    public Button createpoll;    public Button getresults;    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.cont_polls_overview);        createpoll = (Button) findViewById(R.id.createpoll);        getresults = (Button) findViewById(R.id.getresults);        connectToServer();        init();    }    public void connectToServer(){        Thread thread = new Thread(new Runnable() {            @Override            public void run() {                try {                    try {                        InetAddress IP = InetAddress.getByName("10.0.2.2");                        Socket clientSocket = new Socket(IP, 4445);                        Log.d("Servertesting", "creates socket");                        DataOutputStream outToServer = new DataOutputStream(clientSocket.getOutputStream());                        Log.d("Servertesting", "establishes outputstream");                        outToServer.writeBytes(messageToServer + "\n");                        Log.d("SENT", "Message is sent to server");                        BufferedReader inFromServer = new BufferedReader(new InputStreamReader(clientSocket.getInputStream()));                        Log.d("From server", "received shit from server");                        messageFromServer = inFromServer.readLine();                        Log.d("From server", messageFromServer);                        clientSocket.close();                        outToServer.close();                        inFromServer.close();                    } catch (IOException e) {                        e.printStackTrace();                    }                } catch (Exception e) {                    e.printStackTrace();                }            }        });        thread.start();        try {            thread.join();            Log.d("finishthread", "thread ends");        } catch (InterruptedException e) {            e.printStackTrace();        }    }    public void init() {        final String[] loadedPolls = messageFromServer.split(";");        for (int i = 0; i < loadedPolls.length; i++) {            Log.d("messagefromserver", loadedPolls[i]);        }        View.OnClickListener vote1 = new View.OnClickListener() {            public void onClick(View v) {                for (int i = 0; i < loadedPolls.length; i++) {                    Button vote1 = (Button) v;                    int id = (i + 1);                    Log.d("buttoncontent", "Button text: " + vote1.getText() + ", loadedpolls text: " + loadedPolls[i].split(",")[4]);                    if (vote1.getText().equals(loadedPolls[i].split(",")[4])) {                        final int k = i;                        Thread thread = new Thread(new Runnable() {                            @Override                            public void run() {                                try {                                    try {                                        String votePoll = "votePoll" + "1" + loadedPolls[k];                                        InetAddress IP = InetAddress.getByName("10.0.2.2");                                        Socket clientSocket = new Socket(IP, 4445);                                        Log.d("Servertesting", "creates socket");                                        DataOutputStream outToServer = new DataOutputStream(clientSocket.getOutputStream());                                        Log.d("Servertesting", "establishes outputstream");                                        outToServer.writeBytes(votePoll + "\n");                                        Log.d("SENT", "Message is sent to server");                                        clientSocket.close();                                        outToServer.close();                                    } catch (IOException e) {                                        e.printStackTrace();                                    }                                } catch (Exception e) {                                    e.printStackTrace();                                }                            }                        });                        thread.start();                        try {                            thread.join();                            Log.d("finishthread", "thread ends");                        } catch (InterruptedException e) {                            e.printStackTrace();                        }                    }                }                Log.d("Buttontest", "CLICKED one");                Log.d("Buttontest", v.getContext().getPackageName());            }        };        View.OnClickListener vote2 = new View.OnClickListener() {            public void onClick(View v) {                for (int i = 0; i < loadedPolls.length; i++) {                    int id = (i + 1);                    Button vote1 = (Button) v;                    Log.d("buttoncontent", "Button text: " + vote1.getText() + ", loadedpolls text: " + loadedPolls[i].split(",")[5]);                    if (vote1.getText().equals(loadedPolls[i].split(",")[5])) {                        final int k = i;                        Thread thread = new Thread(new Runnable() {                            @Override                            public void run() {                                try {                                    try {                                        String votePoll = "votePoll" + "2" + loadedPolls[k];                                        InetAddress IP = InetAddress.getByName("10.0.2.2");                                        Socket clientSocket = new Socket(IP, 4445);                                        Log.d("Servertesting", "creates socket");                                        DataOutputStream outToServer = new DataOutputStream(clientSocket.getOutputStream());                                        Log.d("Servertesting", "establishes outputstream");                                        outToServer.writeBytes(votePoll + "\n");                                        Log.d("SENT", "Message is sent to server");                                        clientSocket.close();                                        outToServer.close();                                    } catch (IOException e) {                                        e.printStackTrace();                                    }                                } catch (Exception e) {                                    e.printStackTrace();                                }                            }                        });                        thread.start();                        try {                            thread.join();                            Log.d("finishthread", "thread ends");                        } catch (InterruptedException e) {                            e.printStackTrace();                        }                    }                }            }        };        int rowcount = 0;        TableLayout ll = (TableLayout) findViewById(R.id.displayLinear);        for (int i = 0; i < loadedPolls.length; i++) {            TableRow desc = new TableRow(this);            TableRow.LayoutParams pl = new TableRow.LayoutParams(TableRow.LayoutParams.WRAP_CONTENT);            desc.setLayoutParams(pl);            TextView description = new TextView(this);            description.setText(loadedPolls[i].split(",")[3]);            desc.addView(description);            ll.addView(desc, rowcount);            rowcount++;            String tempString;            TableRow row = new TableRow(this);            TableRow.LayoutParams lp = new TableRow.LayoutParams(TableRow.LayoutParams.WRAP_CONTENT);            row.setLayoutParams(lp);            Button button = new Button(this);            Button button2 = new Button(this);            Log.d("arraytest", String.valueOf(loadedPolls.length));            tempString = loadedPolls[i].split(",")[4];            Log.d("arraytest", String.valueOf(loadedPolls.length));            button.setText(tempString);            Log.d("arraytest", String.valueOf(loadedPolls.length));            tempString = loadedPolls[i].split(",")[5];            Log.d("arraytest", String.valueOf(loadedPolls.length));            button2.setText(tempString);            button.setOnClickListener(vote1);            button2.setOnClickListener(vote2);            row.addView(button);            row.addView(button2);            row.setGravity(Gravity.CENTER_HORIZONTAL | Gravity.BOTTOM);            ll.addView(row, rowcount);            rowcount++;        }    }    public void createPoll(View view) {        Intent g = new Intent(Poll_Overview.this, Create_Poll.class);        startActivity(g);    }    public void getResults(View view) {        Intent g = new Intent(Poll_Overview.this, Get_Results.class);        startActivity(g);    }}