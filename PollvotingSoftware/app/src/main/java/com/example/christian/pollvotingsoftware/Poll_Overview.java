package com.example.christian.pollvotingsoftware;import android.content.Intent;import android.os.Bundle;import android.support.v7.app.AppCompatActivity;import android.util.Log;import android.view.Gravity;import android.view.View;import android.widget.Button;import android.widget.TableLayout;import android.widget.TableRow;import android.widget.TextView;import java.io.BufferedReader;import java.io.DataOutputStream;import java.io.IOException;import java.io.InputStreamReader;import java.net.InetAddress;import java.net.Socket;import static com.example.christian.pollvotingsoftware.Main_Menu.messageFromServer;import static com.example.christian.pollvotingsoftware.Main_Menu.messageToServer;/** * The activity that displays all the polls, as well as leads to the results activity and the create activity. */public class Poll_Overview extends AppCompatActivity {    public Button createpoll;    public Button getresults;    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.cont_polls_overview);        createpoll = (Button) findViewById(R.id.createpoll);        getresults = (Button) findViewById(R.id.getresults);        connectToServer();        init();    }    //Connects to the server as soon as this activity is instantiated.    public void connectToServer(){        Thread thread = new Thread(new Runnable() {            @Override            public void run() {                try {                    try {                        // 10.0.2.2 is the IP Address for the local host.                        InetAddress IP = InetAddress.getByName("10.0.2.2");                        // We use the port 4445 for our server.                        Socket clientSocket = new Socket(IP, 4445);                        DataOutputStream outToServer = new DataOutputStream(clientSocket.getOutputStream());                        //Sends the message to the server that is instantiated in the Main_Menu activity.                        outToServer.writeBytes(messageToServer + "\n");                        BufferedReader inFromServer = new BufferedReader(new InputStreamReader(clientSocket.getInputStream()));                        messageFromServer = inFromServer.readLine();                        Log.d("From server", messageFromServer);                        clientSocket.close();                        outToServer.close();                        inFromServer.close();                    } catch (IOException e) {                        e.printStackTrace();                    }                } catch (Exception e) {                    e.printStackTrace();                }            }        });        thread.start();        try {            thread.join();        } catch (InterruptedException e) {            e.printStackTrace();        }    }    public void init() {        //Loads all the poll and splits them up into the different polls.        final String[] loadedPolls = messageFromServer.split(";");        for (int i = 0; i < loadedPolls.length; i++) {        }        //Checks if the a vote button is pressed on the right side and sends the data to the server if it is.        View.OnClickListener vote1 = new View.OnClickListener() {            public void onClick(View v) {                for (int i = 0; i < loadedPolls.length; i++) {                    Button vote1 = (Button) v;                    if (vote1.getText().equals(loadedPolls[i].split(",")[4])) {                        final int k = i;                        Thread thread = new Thread(new Runnable() {                            @Override                            public void run() {                                try {                                    try {                                        //Creates the string that is sent to the server. The "1" is the indicator that it's option 1 that has been pressed. loadedPolls[k] identifies the correct poll.                                        String votePoll = "votePoll" + "1" + loadedPolls[k];                                        // 10.0.2.2 is the IP Address for the local host.                                        InetAddress IP = InetAddress.getByName("10.0.2.2");                                        // We use the port 4445 for our server.                                        Socket clientSocket = new Socket(IP, 4445);                                        DataOutputStream outToServer = new DataOutputStream(clientSocket.getOutputStream());                                        //Sends the string to the server.                                        outToServer.writeBytes(votePoll + "\n");                                        clientSocket.close();                                        outToServer.close();                                    } catch (IOException e) {                                        e.printStackTrace();                                    }                                } catch (Exception e) {                                    e.printStackTrace();                                }                            }                        });                        thread.start();                        try {                            thread.join();                        } catch (InterruptedException e) {                            e.printStackTrace();                        }                    }                }            }        };        //Checks if the a vote button is pressed on the left side and sends the data to the server if it is.        View.OnClickListener vote2 = new View.OnClickListener() {            public void onClick(View v) {                for (int i = 0; i < loadedPolls.length; i++) {                    Button vote1 = (Button) v;                    Log.d("buttoncontent", "Button text: " + vote1.getText() + ", loadedpolls text: " + loadedPolls[i].split(",")[5]);                    if (vote1.getText().equals(loadedPolls[i].split(",")[5])) {                        final int k = i;                        Thread thread = new Thread(new Runnable() {                            @Override                            public void run() {                                try {                                    try {                                        //Creates the string that is sent to the server. The "2" is the indicator that it's option 2 that has been pressed. loadedPolls[k] identifies the correct poll.                                        String votePoll = "votePoll" + "2" + loadedPolls[k];                                        // 10.0.2.2 is the IP Address for the local host.                                        InetAddress IP = InetAddress.getByName("10.0.2.2");                                        // We use the port 4445 for our server.                                        Socket clientSocket = new Socket(IP, 4445);                                        DataOutputStream outToServer = new DataOutputStream(clientSocket.getOutputStream());                                        //Sends the string to the server.                                        outToServer.writeBytes(votePoll + "\n");                                        clientSocket.close();                                        outToServer.close();                                    } catch (IOException e) {                                        e.printStackTrace();                                    }                                } catch (Exception e) {                                    e.printStackTrace();                                }                            }                        });                        thread.start();                        try {                            thread.join();                        } catch (InterruptedException e) {                            e.printStackTrace();                        }                    }                }            }        };        int rowcount = 0;        //Creates the table the polls are shown in.        TableLayout ll = (TableLayout) findViewById(R.id.displayLinear);        //Runs a for-loop to display all the polls on the server.        for (int i = 0; i < loadedPolls.length; i++) {            //Creates the rows with the descriptions in them.            TableRow desc = new TableRow(this);            TableRow.LayoutParams pl = new TableRow.LayoutParams(TableRow.LayoutParams.WRAP_CONTENT);            desc.setLayoutParams(pl);            TextView description = new TextView(this);            description.setText(loadedPolls[i].split(",")[3]);            desc.addView(description);            ll.addView(desc, rowcount);            rowcount++;            String tempString;            //Creates the buttons.            TableRow row = new TableRow(this);            TableRow.LayoutParams lp = new TableRow.LayoutParams(TableRow.LayoutParams.WRAP_CONTENT);            row.setLayoutParams(lp);            Button button = new Button(this);            Button button2 = new Button(this);            //Puts the relevant option strings as the button text.            tempString = loadedPolls[i].split(",")[4];            button.setText(tempString);            tempString = loadedPolls[i].split(",")[5];            button2.setText(tempString);            button.setOnClickListener(vote1);            button2.setOnClickListener(vote2);            row.addView(button);            row.addView(button2);            row.setGravity(Gravity.CENTER_HORIZONTAL | Gravity.BOTTOM);            ll.addView(row, rowcount);            rowcount++;        }    }    //The method for the button to enter the Create_Poll activity.    public void createPoll(View view) {        Intent g = new Intent(Poll_Overview.this, Create_Poll.class);        startActivity(g);    }    //The method for the button to enter the Get_Results activity.    public void getResults(View view) {        Intent g = new Intent(Poll_Overview.this, Get_Results.class);        startActivity(g);    }}